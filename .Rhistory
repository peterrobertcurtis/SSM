# number of vectors N to construct is either N or the number of possible
# combinations, whichever is smaller
N <- min(N, choose(d + deg -1, deg))
# L is the matrix that will contain the generated vectors
L <- matrix(nrow = choose(d + deg - 1, deg), ncol = d)
# count is a count of the number of included generated vectors
count <- 1
# vec is a d dimensional vector of zeroes
vec <- rep(0, d)
# include is a vector of indices indicating which matrix rows are included
# in the model basis
include <- rep(NA, N)
# record parent frame info to pass down recursion chain
parent <- sys.frame(sys.nframe())
# flag to mark when enough vectors have been generated and the matrix can be
# output
finish <- FALSE
} else {
# if this is not the inital call but is inside the recursion, get the
# current matrix of vectors and count from the initial environment
L <- get("L", envir = parent)
count <- get("count", envir = parent)
include <- get("include", envir = parent)
}
# if the recursion has completed, check the generated vector is not to be
# excluded and assign the generated vector to the correct row of the matrix L
# in the initial environment and add one to the count
if (deg == 0){
L[count, ] <- vec
assign("L", L, envir = parent)
assign("count", count + 1, envir=parent)
if (length(exclude)>0){
for (i in 1:length(exclude)) {
if (all(vec[exclude[[i]]] > 0) && all(vec [-exclude[[i]]] == 0)){
return()
}
}
}
include[match(TRUE, is.na(include))] <- count
assign("include", include, envir=parent)
if(sum(!is.na(include)) == N) assign("finish", TRUE, envir = parent)
return()
}
# recursive section: this adds one to an element of vec and passes it into
# comb again but with one less degree
for (i in max(which(vec != 0), 1):length(vec)){
if (get("finish", envir=parent) && !start) return()
if (get("finish", envir=parent))
return(list(basis=L[!is.na(L[, 1]), ],
include = include[!is.na(include)]))
addvec <- rep(0, d)
addvec[i] <- 1
comb(d = d, N = N, vec = vec + addvec, deg = deg - 1, start = FALSE, parent = parent, exclude = exclude)
}
ind <- is.na(L[,1])
# identify the rows of NA to remove when less than N rows are generated
return(list(basis=L[!ind,], include = include[!is.na(include)]))
}
degl(4,180, list(c(1,2))
)
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(1,4), c(2,3), c(2,4), c(3,4)))
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(1,4), c(2,3), c(2,4), c(3,4)))
s3
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(1,4), c(2,3), c(2,4), c(3,4)))
sensitivity.plot(s3, "total")
f <- function(x) sum(x * 1:4) + 5 * x[1]*x[2] + 0.2 *x[2]*x[3]
design <- matrix(runif(400, -1, 1), ncol = 4)
response <- apply(design, 1, f)
s <- fit.ssm(design, response, SA = TRUE)
s
sensitivity.plot(s, "main_sobol")
# The grey bars indicate interactions
sensitivity.plot(s, "sobol")
# This plots total indices for main effects, and total interaction indices for second order interactions
sensitivity.plot(s, "total")
f <- function(x) sum(x * 1:4) + 5 * x[1]*x[2] + x[2]*x[3]
design <- matrix(runif(400, -1, 1), ncol = 4)
response <- apply(design, 1, f)
s <- fit.ssm(design, response, SA = TRUE)
s
sensitivity.plot(s, "main_sobol")
# The grey bars indicate interactions
sensitivity.plot(s, "sobol")
# This plots total indices for main effects, and total interaction indices for second order interactions
sensitivity.plot(s, "total")
# fit new model without unnecessary second order interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(1,4), c(2,3), c(2,4), c(3,4)))
sensitivity.plot(s3, "total")
f <- function(x) sum(x * 1:3) + 5 * x[1]*x[2]
design <- matrix(runif(300, -1, 1), ncol = 3)
response <- apply(design, 1, f)
s <- fit.ssm(design, response, SA = TRUE)
s
sensitivity.plot(s, "main_sobol")
# The grey bars indicate interactions
sensitivity.plot(s, "sobol")
# This plots total indices for main effects, and total interaction indices for second order interactions
sensitivity.plot(s, "total")
# fit new model without unnecessary second order interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(2,3), c(1,2,3)))
sensitivity.plot(s3, "total")
# fit new model without unnecessary second order interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(2,3), c(1,2,3)))
s3
sensitivity.plot(s3, "total")
# fit new model without unnecessary second order interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,3), c(2,3), c(1,2,3)))
s3@basis
sensitivity.plot(s3, "total")
# fit new model without unnecessary second order interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(c(1,2),c(1,3), c(2,3), c(1,2,3)))
# fit new model without any interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(1))
s3
sensitivity.plot(s3, "total")
# fit new model without any interactions
s3 <- fit.ssm(design, response, SA = TRUE, exclude = list(1))
s3
sensitivity.plot(s3, "sobol")
library(SSM)
f <- function(x) sum(x * 1:3) + 5 * x[1]*x[2]
design <- matrix(runif(300, -1, 1), ncol = 3)
response <- apply(design, 1, f)
s <- fit.ssm(design, response, SA = TRUE)
s
sensitivity.plot(s, "main_sobol")
# The grey bars indicate interactions
sensitivity.plot(s, "sobol")
# This plots total indices for main effects, and total interaction indices for second order interactions
sensitivity.plot(s, "total", cex=0.5)
f <- function(x) sum(x * 1:3) + 5 * x[1]*x[2]
design <- matrix(runif(300, -1, 1), ncol = 3)
response <- apply(design, 1, f)
s <- fit.ssm(design, response, SA = TRUE)
s
sensitivity.plot(s, "main_sobol")
# The grey bars indicate interactions
sensitivity.plot(s, "sobol")
# This plots total indices for main effects, and total interaction indices for second order interactions
sensitivity.plot(s, "total", cex.main=0.5)
design <- seq(-1, 1, 0.25)
responses <- sapply(design, "^", 2)
s1 <- fit.ssm(design, responses, GP = TRUE)
s2 <- fit.ssm(design, responses, GP = TRUE, type = "matern32")
plot(s1, sub = "Squared exponential")
plot(s2, sub = "Matern 3/2")
library(SSM)
citation("SSM")
devtools::load_all()
citation("SSM")
library(SSM)
citation("SSM")
readCitationFile("SSM")
source('D:/horse/OneDrive/Current work/r package/SSM/inst/CITATION.R', echo=TRUE)
source('D:/horse/OneDrive/Current work/r package/SSM/inst/CITATION.R', echo=TRUE)
source('D:/horse/OneDrive/Current work/r package/SSM/inst/CITATION.R', echo=TRUE)
source('D:/horse/OneDrive/Current work/r package/SSM/inst/CITATION.R', echo=TRUE)
library(SSM)
citation("SSM")
source('D:/horse/OneDrive/Current work/r package/SSM/inst/CITATION.R', echo=TRUE)
library(SSM)
citation("SSM")
library(SSM)
devtools:build()
library("devtools", lib.loc="~/R/win-library/3.3")
devtools:build()
devtools::build()
source('D:/horse/OneDrive/Current work/r package/SSM/R/SSM_method.R', echo=TRUE)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
X<-runif(10,-1,1)
Y<-runif(10)
s<-fit.ssm(X,Y)
plot(s)
library(SSM)
plot(s)
plot(s, GP=TRUE)
plot(s, xlim=c(0,0.5))
plot(s, ylim=c(0,0.5))
?predict
library(SSM)
predict(s, 1)
predict(s, 0.5)
plot(s)
predict.SSM
predict.SSM()
predict.SSM <- function (object, x, alpha=0.05, ...){
# uses the ssm to predict an observation at point x
# arguments:
#   object:      the "ssm" fitted model.
#   x:        the prediction location
#   alpha:    Set the alpha value for the prediction interval if a metamodel
#             GP has been computed.
if(object@fail == TRUE) stop("The SSM must be fit to data before it can be used
for prediction.\n")
if (object@dimension == 1){
X <- (rep(x, object@basis_size) ^ t(object@basis)) %*% object@P
} else {
X <- matrix (rep (x, object@basis_size), nrow = object@dimension)
X <- (X ^ t(object@basis)) %*% object@P
X <- apply (X, 2, prod)
}
fit   <- sum(X %*% object@theta)
bound <- 0
if (length(object@r)>0){
s <- object
s@design <- rbind(x, object@design)
new.dist <- new.distance(object = s, type = object@distance_type)[1, -1]
if(sum(new.dist == 0) > 0)
return(list(lower = fit, model = fit, upper = fit))
new.cov  <- compute.covariance.from.distance(new.dist, object@r, object@type, object)
V <- object@sigma * (1 - sum(diag(solve(object@covariance,
new.cov %*% t(new.cov)))))
if(V < 0) V <- 0
if(V > 1) V <- 1
bound   <- qnorm(1 - alpha / 2, mean = 0, sd = sqrt (V))
return (list(lower = fit - bound, model = fit, upper = fit + bound))
}
return(fit)
}
predict.SSM()
predict.SSM(s)
predict.SSM(s, 1)
library(SSM)
predict(s)
predict(s, 1)
predict(s, 1, GP=TRUE)
plot(s)
design <- seq(-1, 1, 0.25)
responses <- sapply(design, "^", 2)
s1 <- fit.ssm(design, responses, GP = TRUE)
s2 <- fit.ssm(design, responses, GP = TRUE, type = "matern32")
plot(s1, sub = "Squared exponential")
s<-fit.ssm(X,Y, GP=TRUE)
plot(s)
s
predict(s,1)
new.distance()
new.distance
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
install.packages(qpdf)
install.packages("qpdf")
install.packages("qpdf")
install.packages("qpdf")
library(SSM)
library("tools", lib.loc="C:/Program Files/R/R-3.3.1/library")
library(SSM)
library(SSM)
?testthat::skip_on_cran
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- runif(20)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
#'
#' # In the next plots, the grey bars indicate interactions.
#' sensitivity.plot(s, "sobol")
#' sensitivity.plot(s, "total")
#' # Identifying particular indices is best done using the information held in
#' # the SSM object.  The following orders s@total_int_factors so the
#' # interaction indicated by the top row is the most important.
#' ind <- order(s@total_int, descending = TRUE)
#' s@total_int_factors[ind, ]
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- runif(20)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
# In the next plots, the grey bars indicate interactions.
sensitivity.plot(s, "sobol")
#' sensitivity.plot(s, "total")
#' # Identifying particular indices is best done using the information held in
#' # the SSM object.  The following orders s@total_int_factors so the
#' # interaction indicated by the top row is the most important.
#' ind <- order(s@total_int, descending = TRUE)
#' s@total_int_factors[ind, ]
sensitivity.plot(s, "total")
ind <- order(s@total_int, descending = TRUE)
s@total_int
?order
ind <- order(s@total_int, decreasing = TRUE)
s@total_int_factors[ind, ]
library(SSM)
library(SSM)
?SSM
`SSM-package`
?SSM-`SSM-package`
?SSM-package
?"SSM-package""
?"SSM-package""
?"SSM-package"
help(SSM)
help(SSM=package)
help(SSM-package)
help("SSM-package"")
!
help("SSM-package")
citation(SSM)
citation("SSM"")
citation("SSM")
citation("SSM")
R CMD check --as-cran
?qpdf
??qpdf
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
devtools::build_win()
devtools::build_win()
devtools::use_readme_rmd()
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(X, 1, "^", 1:4)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 1, prod)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(X, 1, "^", 1:4)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
s
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="full")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
View(predict.SSM)
source('D:/horse/OneDrive/Current work/r package/SSM/R/GP_SSM.R', echo=TRUE)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
source('D:/horse/OneDrive/Current work/r package/SSM/R/plot_SSM.R', echo=TRUE)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y, SA = TRUE, GP = TRUE, validation = TRUE)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y, SA = TRUE, GP = TRUE, validation = TRUE)
s
plot(s, yrange="yrange")
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("NEWS.md")
X<-runif(10)
X<-runif(10) * 2 -1
Y<-runif(10)
s<-fit.ssm(X, Y, SA=TRUE, validation = TRUE)
s<-fit.ssm(X, Y, SA=TRUE, validation = TRUE, GP = TRUE)
library(SSM)
library(SSM)
s
plot(s)
mean(Y) - Y
(mean(Y) - Y)^2
sum((mean(Y) - Y)^2)
sum((mean(Y) - Y)^2)/length(Y)
sqrt(sum((mean(Y) - Y)^2)/length(Y))
s@residuals
s@residuals^2
sum(s@residuals^2)
sum(s@residuals^2)/10
sqrt(sum(s@residuals^2)/10)
