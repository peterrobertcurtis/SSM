predict.SSM(s)
predict.SSM(s, 1)
library(SSM)
predict(s)
predict(s, 1)
predict(s, 1, GP=TRUE)
plot(s)
design <- seq(-1, 1, 0.25)
responses <- sapply(design, "^", 2)
s1 <- fit.ssm(design, responses, GP = TRUE)
s2 <- fit.ssm(design, responses, GP = TRUE, type = "matern32")
plot(s1, sub = "Squared exponential")
s<-fit.ssm(X,Y, GP=TRUE)
plot(s)
s
predict(s,1)
new.distance()
new.distance
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
library(SSM)
install.packages(qpdf)
install.packages("qpdf")
install.packages("qpdf")
install.packages("qpdf")
library(SSM)
library("tools", lib.loc="C:/Program Files/R/R-3.3.1/library")
library(SSM)
library(SSM)
?testthat::skip_on_cran
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- runif(20)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
#'
#' # In the next plots, the grey bars indicate interactions.
#' sensitivity.plot(s, "sobol")
#' sensitivity.plot(s, "total")
#' # Identifying particular indices is best done using the information held in
#' # the SSM object.  The following orders s@total_int_factors so the
#' # interaction indicated by the top row is the most important.
#' ind <- order(s@total_int, descending = TRUE)
#' s@total_int_factors[ind, ]
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- runif(20)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
# In the next plots, the grey bars indicate interactions.
sensitivity.plot(s, "sobol")
#' sensitivity.plot(s, "total")
#' # Identifying particular indices is best done using the information held in
#' # the SSM object.  The following orders s@total_int_factors so the
#' # interaction indicated by the top row is the most important.
#' ind <- order(s@total_int, descending = TRUE)
#' s@total_int_factors[ind, ]
sensitivity.plot(s, "total")
ind <- order(s@total_int, descending = TRUE)
s@total_int
?order
ind <- order(s@total_int, decreasing = TRUE)
s@total_int_factors[ind, ]
library(SSM)
library(SSM)
?SSM
`SSM-package`
?SSM-`SSM-package`
?SSM-package
?"SSM-package""
?"SSM-package""
?"SSM-package"
help(SSM)
help(SSM=package)
help(SSM-package)
help("SSM-package"")
!
help("SSM-package")
citation(SSM)
citation("SSM"")
citation("SSM")
citation("SSM")
R CMD check --as-cran
?qpdf
??qpdf
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
devtools::build_win()
devtools::build_win()
devtools::use_readme_rmd()
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(X, 1, "^", 1:4)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 1, prod)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(X, 1, "^", 1:4)
s <- fit.ssm(X, Y)
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, prod)
s <- fit.ssm(X, Y)
s
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict (s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s)
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="full")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(40, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
View(predict.SSM)
source('D:/horse/OneDrive/Current work/r package/SSM/R/GP_SSM.R', echo=TRUE)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
s <- fit.ssm(X, Y, SA = TRUE)
s
sensitivity.plot(s)
s <- fit.ssm(X, Y, GP = TRUE)
predict(s, rep(0.5, 4))
source('D:/horse/OneDrive/Current work/r package/SSM/R/plot_SSM.R', echo=TRUE)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
library(SSM)
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y, SA = TRUE, GP = TRUE, validation = TRUE)
s
plot(s, yrange="yrange")
X <- matrix(runif(80, -1, 1), ncol = 4)
Y <- apply(apply(X, 1, "^", 1:4), 2, sum)
s <- fit.ssm(X, Y, SA = TRUE, GP = TRUE, validation = TRUE)
s
plot(s, yrange="yrange")
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("NEWS.md")
X<-runif(10)
X<-runif(10) * 2 -1
Y<-runif(10)
s<-fit.ssm(X, Y, SA=TRUE, validation = TRUE)
s<-fit.ssm(X, Y, SA=TRUE, validation = TRUE, GP = TRUE)
library(SSM)
library(SSM)
s
plot(s)
mean(Y) - Y
(mean(Y) - Y)^2
sum((mean(Y) - Y)^2)
sum((mean(Y) - Y)^2)/length(Y)
sqrt(sum((mean(Y) - Y)^2)/length(Y))
s@residuals
s@residuals^2
sum(s@residuals^2)
sum(s@residuals^2)/10
sqrt(sum(s@residuals^2)/10)
library(SSM)
library(SSM)
devtools::use_testthat()
all.equal?
?a
?all.equal
expect_equal(10, 10 + 1e-7)
testthat::expect_equal(10, 10 + 1e-7)
testthat::expect_equal(10, 10 + 1e-7)
testthat::expect_identical(10, 10 + 1e-7)
testthat::expect_identical(c(10,10), c(10,10 + 1e-7)
)
testthat::expect_equal(c(10,10), c(10,10 + 1e-7)
)
testthat::expect_equal(c(10,5), c(10, 5 + 1e-7))
?testthat::context
?lapply
library(SSM)
devtools::test()
library(SSM)
devtools::test()
devtools::test()
library(SSM)
devtools::test()
?SSM
library(SSM)
library(SSM)
library(SSM)
X<-runif(10) * 2 - 1
Y<-runif(10)
s <- fit.ssm(X, Y)
H1 <- constructH(s)
library(SSM)
H1 <- constructH(s)
H2 <- constructH(s, 2)
H1
H2
H1 - H2
H1
H2
t(H1) %*% s@theta
t(H1) %*% Y
cbind(t(H1) %*% Y, theta)
cbind(t(H1) %*% Y, s@theta)
cbind(t(H2) %*% Y, s@theta)
library(SSM)
H1 <- constructH(s)
H2 <- constructH(s,2)
H1-H2
?SSM
s <- fit.ssm(X,Y, SA = TRUE)
s
s@main_ind
X<-matrix(runif(20, -1, 1), ncol = 2)
s <- fit.ssm(X,Y, SA = TRUE)
s@main-ind
s@main_ind
s <- fit.ssm(X,Y)
s@total_variance
length(s@total_variance)
diag(s@main_ind[ , 1])
s@main_ind
s <- fit.ssm(X,Y, SA=TRUE)
diag(s@main_ind[ , 1])
s@total_int
s@total_int_factors
X <- matrix(runif(30, -1, 1), ncol=3)
s <- fit.ssm(X,Y, SA=TRUE)
diag(s@main_ind[ , 1])
s@total_int
s@total_int_factors
s@int_factors
apply(ssm@basis[, c(1,2)] > 0 , 1, prod)
apply(s@basis[, c(1,2)] > 0 , 1, prod)
library(SSM)
constructDelta(s)
library(SSM)
constructQ(s, 1)
debug(construct(Q))
debug(constructQ)
constructQ(s, 1)
dim(H)
dim(Delta)
t(H) %*% Delta
library(SSM)
constructQ(s, 1)
library(SSM)
constructH(s, 1)
library(SSM)
dim(constructH(s, 1))
dim(constructH(s, 2))
H0<-constructH(s, 2)
D <- constructDelta(s)
dim(D)
D
D <- diag(D)
H0 %*% D
library(SSM)
constructQ(s,1)
Q<-constructQ(s,1)
Q
t(Y) %*% Q %*% Y
s@main_sobol & s@total_variance
s@total_variance
s@main_ind
s@main_sobol
s@main_sobol*s@total_variance
t(Y) %*% Q %*% Y
devtools::test()
X <- runif(5, -1, 1)
Y <- runif(5)
s <- fit.ssm(X, Y, SA = TRUE)
Q <- constructQ(s,1)
library(SSM)
devtools::test()
library(SSM)
devtools::test()
devtools::test()
library(SSM)
X <- matrix(runif(10, -1, 1), ncol = 2)
Y <- runif(5)
s <- fit.ssm(X, Y, SA = TRUE)
Q <- constructQ(s,1)
s
t(Y) %*% Q %*% Y
s@total_variance * s@main_sobol
s@total_variance * s@main_sobol[1]
as.numeric(t(Y) %*% Q %*% Y)
library(SSM)
devtools::test()
library(SSM)
s
H <- constructH(s)
H
H - constructH(s, 2)
X
X <- matrix(c(-1,-1,1,1,-1,1,1,-1), ncol=2, byrow=TRUE)
X
Y<-runif(4)
s<-fit.ssm(X,Y)
H<-constructH(s)
s
Delta <- constructDelta(s, c(1,2))
constructDelta
Delta <- constructDelta(s)
Q12 <- constructQ(s, c(1,2))
library(SSM)
constructQ(s,c(1,2))
Q12 <- constructQ(s,c(1,2))
Q1 <- constructQ(s,1)
ssm@main_ind
s@main_ind
update.sensitivity(s)
s@total_variance
library(SSM)
Q1 <- constructQ(s,1)
Q2 <- constructQ(s,1)
Q1
Q2
Q12
Q1+Q2+Q3
Q1+Q2+Q12
(Q1+Q2+Q12)
s<-fit.ssm(X,Y,SA = TRUE)
s@total_variance
t(Y) %*% (Q1+Q2+Q12) %*% Y
Delta
rm(Delta)
t(Y) %*% (Q1+Q2+Q12) %*% Y
t(Y) %*% Q1 %*% Y
s
t(Y) %*% Q1 %*% Y * s@total_variance
0.726 * s@total_variance
s@main_ind * s@total_variance
s@main_sobol * s@total_variance
t(Y) %*% Q1 %*% t(Y)
t(Y) %*% Q1 %*% Y
t(Y) %*% Q2 %*% Y
debug(constructQ)
Q2<-constructQ(s, 2)
ssm@main_ind
ssm@main_ind[,indices]
Q
Q2
Q1
t(Y) %*% Q2 %*% Y
s@main_sobol * s@total_variance
X
devtools::use_vignette("sensitivity permutation tests")
s
s@int_sobol
library(SSM)
library(SSM)
t(Y) %*% Q1 %*% Y
t(Y[c(2, 1, 3, 4)]) %*% Q1 %*% Y[c(2, 1, 3, 4)]
t(Y[c(1, 2, 4, 3)]) %*% Q1 %*% Y[c(1, 2, 4, 3)]
t(Y[c(2, 1, 4, 3)]) %*% Q1 %*% Y[c(2, 1, 4, 3)]
Y
X
library(SSM)
constructQ(s, 0)
constructDelta(s)
diag(constructDelta(s))
debug(constructQ)
constructQ(s, 0)
library(SSM)
constructQ(s, 0)
constructQ(s, 0) - Q1 - Q2 - Q12
simY
f <- function(x) 1 + x[2] + x[1]*x[2] + x[1]
simY <- apply(X, 1, f)
X
simY
X<-as.matrix(expand.grid(c(-1,0,1),c(-1,0,1),c(-1,0,1)))
X
Y
f <- function(x)
2*x[1] + 4 * cos(x[2]*x[1]*pi) + x[2]^3
f
apply(X,1,f)
f <- function(x)
2*x[1] + 4 * cos(x[2]*x[1]) + x[2]^3
apply(X,1,f)
