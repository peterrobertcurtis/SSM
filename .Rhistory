lapply(as.list(L), levelIndices, X = X[,1])
levelIndices <- function(i, vec){
which(vec == i)
}
L
lapply(L, levelIndices, vec = X[,1])
permutableIndicesByCol <- function(X, col){
L   <- columnLevels(X, col)
res <- levelIndices(col, X[ , i])
return(res)
}
permutableIndicesByCol(X, 1)
levelIndices <- function(i, vec){
which(vec == i)
}
permutableIndicesByCol <- function(X, col){
L   <- columnLevels(X, col)
res <- lapply(L, levelIndices, vec = X[ , col])
return(res)
}
permutableIndicesByCol(X, 1)
permutableIndicesByCol(X, 2)
permutableIndicesByCol(X, 2)->P
P
permn(P[[1]])
combinat::permn(P[[1]])
lapply(P,combinat::permn)
?runif
permutationBlocksByCol <- function(X, col){
P <- permutableIndicesByCol(X, col)
L <- lapply(P, combinat::permn)
}
P <- permutationBlocksByCol(X, 1)
P
P[[1]]
[[1]]
P[[1]]
P
unlist(P)
P[[1]]
P <- permutationBlocksByCol(X, 1)
P
P <- permutableIndicesByCol(X, col)
P <- permutableIndicesByCol(X, 1)
P
P <- permutationBlocksByCol(X, 1)
P
length(P)
P[[1]][[1]]
P[[1]]
P[[1]][1]
(P[[1]])[[1]]
P
len(P)
length(P)
P
len<-length(P)
len
length(P[[i]])
length(P[[1]])
length(P[[1]][1])
length(P[[1]][[1]])
blockLengths <- function(permBlocks{
len <- length(P)
res <- vector("numeric", len)
for (i in 1:len) res[i] <- length(P[[i]][[1]])
return (res)
}
blockLengths <- function(permBlocks){
len <- length(P)
res <- vector("numeric", len)
for (i in 1:len) res[i] <- length(P[[i]][[1]])
return (res)
}
blockLengths(P)
P[[1]]
dim(P[[1]])
dim(P[[1]][[1]])
P[[1]][[1]]
P[[1]][1]
(P[[1]])[1]
(P[[1]])[[1]]
(P[[1]])
length(P[[1]])
P
lapply(P, length)
sapply(P, length)
blockLengths <- function(permBlocks){
sapply(P, length)
}
blockLengths(P)
blockLengths(P) -> bl
?sample
randomOneToN <- function(N){
sample(1:N, 1)
}
randomOneToN(1)
randomOneToN(1)
randomOneToN(1)
randomOneToN(2)
randomOneToN(2)
randomOneToN(2)
randomOneToN(2)
randomOneToN(2)
randomOneToN(20)
randomOneToN(20)
randomOneToN(20)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
randomOneToN(20.4)
P
P[[1]]
PP <-P[[1]]
PP[[1]]
P
bl <- blocklengths(P)
bl <- blockLengths(P)
bl
p <- sapply(bl, randomOneToN)
p
mapply(P, p, getPermutationFromNumber)
?mapply
mapply(getPermutationFromNumber, P, p)
getPermutationFromNumber <- function(permBlock, n){
permBlock[[n]]
}
mapply(getPermutationFromNumber, P, p)
P[[1]][[4]]
P[[2]][[2]]
P
createPermutationByCol <- function(X, col){
P  <- permutationBlocksByCol(X, col)
bl <- blockLengths(P)
p  <- sapply(bl, randomOneToN)
mapply(getPermutationFromNumber, P, p simplify = FALSE)
}
createPermutationByCol <- function(X, col){
P  <- permutationBlocksByCol(X, col)
bl <- blockLengths(P)
p  <- sapply(bl, randomOneToN)
mapply(getPermutationFromNumber, P, p simplify = FALSE)
}
createPermutationByCol <- function(X, col){
P  <- permutationBlocksByCol(X, col)
bl <- blockLengths(P)
p  <- sapply(bl, randomOneToN)
mapply(getPermutationFromNumber, P, p, simplify = FALSE)
}
createPermutationByCol(X,1)
createPermutationByCol <- function(X, col){
P  <- permutationBlocksByCol(X, col)
bl <- blockLengths(P)
p  <- sapply(bl, randomOneToN)
mapply(getPermutationFromNumber, P, p, SIMPLIFY = FALSE)
}
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
createPermutationByCol(X,1)
origPerm <- function(permBlock){
permBlock[[1]]
}
origPerm(P[[1]])
origPerm(P[[2]])
origPerm(P[[3]])
?sapply
sapply(1:length(P), origPerm)
P[[1]][[1]]
P[[]][[1]]
P[[2]][[1]]
origPerm <- function(i, permBlocks){
permBlock[[i]][[1]]
}
sapply(1:length(P), origPerm, permBlocks = P)
origPerm <- function(i, permBlocks){
permBlocks[[i]][[1]]
}
sapply(1:length(P), origPerm, permBlocks = P)
sapply(1:length(P), origPerm, permBlocks = P)
sapply(1:length(P), origPerm, permBlocks = P, simplify = FALSE)
sapply(1:length(P), origPerm, permBlocks = P, simplify = TRUE)
sapply(1:length(P), origPerm, permBlocks = P, simplify = FALSE)
unlist(sapply(1:length(P), origPerm, permBlocks = P, simplify = FALSE))
perm <- mapply(getPermutationFromNumber, P, p, SIMPLIFY = FALSE)
perm
unlist(perm)
perm <- unlist(mapply(getPermutationFromNumber, P, p, SIMPLIFY = FALSE))
perm
orig
orig <- unlist(sapply(1:length(P), origPerm, permBlocks = P,
simplify = FALSE))
orig
X1 <- X
X1[orig, ]<-X1[perm, ]
checkPermutedDesign(X1)
checkPermutedDesign <- function(X, perm){
as.logical(apply(X[perm, ] == X, 2, prod))
}
checkPermutedDesign(X1)
X1
X
orig
perm
X1
X
P
X1[orig,]<-X[perm,]
X1
X
perm[orig]
checkPermutedDesign(X, perm[orig])
createPermutationByCol <- function(X, col){
P  <- permutationBlocksByCol(X, col)
bl <- blockLengths(P)
p  <- sapply(bl, randomOneToN)
perm <- unlist(mapply(getPermutationFromNumber, P, p, SIMPLIFY = FALSE))
orig <- unlist(sapply(1:length(P), origPerm, permBlocks = P,
simplify = FALSE))
return(perm[orig])
}
p <- createPermutationByCol(X, 1)
p
X[createPermutationByCol(X,2)]
X[createPermutationByCol(X,2)]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
X[createPermutationByCol(X,2),]
createPermutationByCol <- function(permBlocks, bl){
p  <- sapply(bl, randomOneToN)
perm <- unlist(mapply(getPermutationFromNumber, permBlocks, p, SIMPLIFY = FALSE))
orig <- unlist(sapply(1:length(permBlocks), origPerm, permBlocks = permBlocks,
simplify = FALSE))
return(perm[orig])
}
P  <- permutationBlocksByCol(X, 2)
bl <- blockLengths(P)
P
bl
P[[1]]
createPermutationByCol(permBlocks,bl)
createPermutationByCol
createPermutationByCol <- function(permblocks, bl){
p  <- sapply(bl, randomOneToN)
perm <- unlist(mapply(getPermutationFromNumber, permblocks, p, SIMPLIFY = FALSE))
orig <- unlist(sapply(1:length(permblocks), origPerm, permBlocks = permblocks,
simplify = FALSE))
return(perm[orig])
}
createPermutationByCol(permBlocks,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutationByCol(P,bl)
createPermutation <- function(permblocks, bl){
p  <- sapply(bl, randomOneToN)
perm <- unlist(mapply(getPermutationFromNumber, permblocks, p, SIMPLIFY = FALSE))
orig <- unlist(sapply(1:length(permblocks), origPerm, permBlocks = permblocks,
simplify = FALSE))
return(perm[orig])
}
?identical
p <- createPermutation(P, bl)
p
res <- vector("numeric",2)
res
res <- vector("list", 2)
res
p <- createPermutation(P, bl)
p
lapply(res, identical, p)
res[[1]] <- p
lapply(res, identical, p)
sapply(res, identical, p)
any(sapply(res, identical, p))
?while
Q
?while
createPermutationByCol <- function(X, i, n){
P  <- permutationBlocksByCol(X, i)
bl <- blockLengths(P)
res <- vector("list", n)
for (j in 1:n){
while (any(sapply(res, identical, p))){}
p <- createPermutation(P, bl)
}
res[[j]] <- p
}
return(res)
}
createPermutationByCol <- function(X, i, n){
P  <- permutationBlocksByCol(X, i)
bl <- blockLengths(P)
res <- vector("list", n)
for (j in 1:n){
while (any(sapply(res, identical, p))){}
p <- createPermutation(P, bl)
}
res[[j]] <- p
}
return(res)
}
createPermutationByCol <- function(X, i, n){
P  <- permutationBlocksByCol(X, i)
bl <- blockLengths(P)
res <- vector("list", n)
for (j in 1:n){
while (any(sapply(res, identical, p))){
p <- createPermutation(P, bl)
}
res[[j]] <- p
}
return(res)
}
createPermutationByCol(X, 1, 10)
p <- createPermutationByCol(X, 1, 10)
p
checkPermutedDesign(X, p[[1]])
checkPermutedDesign(X, p[[2]])
checkPermutedDesign(X, p[[3]])
checkPermutedDesign(X, p[[4]])
X[p[[1]], ]
X
p <- createPermutationByCol(X, 2, 10)
p
checkPermutedDesign(X, p[[1]])
p[[1]]
X
p[[1]]
p[[1]]
p <- createPermutationByCol(X, 2, 10)
p
library(SSM)
library(SSM)
X
X<-matrix(expand.grid(c(-1,0,1), c(-1,0,1)))
X<-matrix(expand.grid(c(-1,0,1), c(-1,0,1)), ncol = 3)
X<-matrix(expand.grid(c(-1,0,1), c(-1,0,1)), ncol = 2)
X
X<-as.matrix(expand.grid(c(-1,0,1), c(-1,0,1)), ncol = 2)
X
X<-as.matrix(expand.grid(c(-1,0,1), c(-1,0,1)))
X
Y<-runif(9)
p<-createPermutationByCol(X, 1, 1)
library(SSMGPsimulation)
p<-createPermutationByCol(X, 1, 1)
library(SSM)
p<-createPermutationByCol(X, 1, 1)
debug(createPermutationByCol)
p<-createPermutationByCol(X, 1, 1)
P
P
debug(createPermutationByCol)
createPermutationByCol(X, 1, 1)
P
blockLengths(P)
library(SSM)
createPermutationByCol(X, 1, 1)
library(SSM)
createPermutationByCol(X, 1, 1)
res
res
vector("list", 1)
test <- vector("list", 1)
identical(test, NULL)
identical(NULL, test)
sapply(test, identical, NULL)
library(SSM)
createPermutationByCol(X, 1, 1)
createPermutationByCol(X, 1, 1)
createPermutationByCol(X, 1, 1)
createPermutationByCol(X, 1, 1)
createPermutationByCol(X, 1, 1)
checkPermutedDesign(X, createPermutationByCol(X, 1, 1))
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1))
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 1, 1)[[2]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
checkPermutedDesign(X, createPermutationByCol(X, 2, 1)[[1]])
library(SSM)
createPermutationByCol(X, 1, 1000)
test <- createPermutationByCol(X, 1, 1000)
test <- createPermutationByCol(X, 1, 1000)
library(SSM)
test
p
test[1]
test[1:40]
createPermutationByCol <- function(X, i, n, exit = 100){
P  <- permutationBlocksByCol(X, i)
bl <- blockLengths(P)
res <- vector("list", n)
p <- NULL
for (j in 1:n){
count <- 1
while (any(sapply(res, identical, p)) && count < exit){
p <- createPermutation(P, bl)
count <- count + 1
if (count == exit){
print(paste("No new permutation found after", count,
"tries. Ending generation."))
return(res[1:j])
}
}
res[[j]] <- p
}
return(res)
}
test <- createPermutationByCol(X, 1, 1000)
test <- createPermutationByCol(X, 1, 1000)
test <- createPermutationByCol(X, 1, 1000)
library(SSM)
library(SSM)
test <- createPermutationByCol(X, 1, 1000)
test
library(SSM)
library(SSM)
library(SSM)
library(SSM)
